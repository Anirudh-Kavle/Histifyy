{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mahna\\\\Desktop\\\\mozohack\\\\Histify\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n\n      return (\n        /*#__PURE__*/\n        // <HTMLFlipBook className=\"book\" width={600} height={600}>\n        //   <div className=\"demoPage\">\n        //     <img src={image1} alt=\"Page 1\" />\n        //     <div className=\"pageText\">Text for Page 1</div>\n        //   </div>\n        //   <div className=\"demoPage\">\n        //     <img src={image1} alt=\"Page 2\" />\n        //     <div className=\"pageText\">Text for Page 2</div>\n        //   </div>\n        //   <div className=\"demoPage\">\n        //     <img src={image1} alt=\"Page 3\" />\n        //     <div className=\"pageText\">Text for Page 3</div>\n        //   </div>\n        //   <div className=\"demoPage\">\n        //     <img src={image1} alt=\"Page 4\" />\n        //     <div className=\"pageText\">Text for Page 4</div>\n        //   </div>\n        // </HTMLFlipBook>\n        _jsxDEV(\"h1\", {\n          children: \"efe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }, this)\n      );\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","MyComponent","constructor","args","render","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mahna/Desktop/mozohack/Histify/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport HTMLFlipBook from \"react-pageflip\"\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass MyComponent extends StreamlitComponentBase {\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n\r\n    return (\r\n      // <HTMLFlipBook className=\"book\" width={600} height={600}>\r\n      //   <div className=\"demoPage\">\r\n      //     <img src={image1} alt=\"Page 1\" />\r\n      //     <div className=\"pageText\">Text for Page 1</div>\r\n      //   </div>\r\n      //   <div className=\"demoPage\">\r\n      //     <img src={image1} alt=\"Page 2\" />\r\n      //     <div className=\"pageText\">Text for Page 2</div>\r\n      //   </div>\r\n      //   <div className=\"demoPage\">\r\n      //     <img src={image1} alt=\"Page 3\" />\r\n      //     <div className=\"pageText\">Text for Page 3</div>\r\n      //   </div>\r\n      //   <div className=\"demoPage\">\r\n      //     <img src={image1} alt=\"Page 4\" />\r\n      //     <div className=\"pageText\">Text for Page 4</div>\r\n      //   </div>\r\n      // </HTMLFlipBook>\r\n      <h1>efe</h1>\r\n    )\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":";AAAA,SAEEA,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGxC;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASL,sBAAsB,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACxCC,MAAM,GAAG,MAAiB;MAC/B;MACA;;MAEA;QAAA;QACE;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAJ,OAAA;UAAAK,QAAA,EAAI;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;IAEhB,CAAC;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAAC,EAAA,GAAeb,uBAAuB,CAACI,WAAW,CAAC;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}